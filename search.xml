<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS里的数据类型转换</title>
      <link href="/2019/08/08/js-li-de-shu-ju-lei-xing-zhuan-huan/"/>
      <url>/2019/08/08/js-li-de-shu-ju-lei-xing-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-任意类型转字符串"><a href="#1-任意类型转字符串" class="headerlink" title="1 任意类型转字符串"></a>1 任意类型转字符串</h2><h3 id="1-1-使用String-方法"><a href="#1-1-使用String-方法" class="headerlink" title="1.1 使用String() 方法"></a>1.1 使用String() 方法</h3><pre><code>String(1) //&quot;1&quot;String(true) //&quot;true&quot;String(null) //&quot;null&quot;String(undefined) //&quot;undefined&quot;String({}) //&quot;[object Object]&quot;</code></pre><h3 id="1-2-使用toString-方法"><a href="#1-2-使用toString-方法" class="headerlink" title="1.2 使用toString()方法"></a>1.2 使用toString()方法</h3><pre><code>(1).toString()&quot;1&quot;true.toString()&quot;true&quot;null.toString()// 无法转换 报错 : Uncaught TypeError: Cannot read property &#39;toString&#39; of nullundefined.toString()// 无法转换 报错 : Uncaught TypeError: Cannot read property &#39;toString&#39; of undefined({}).toString()&quot;[object Object]&quot;</code></pre><h3 id="1-3-使用x-‘’"><a href="#1-3-使用x-‘’" class="headerlink" title="1.3 使用x + ‘’"></a>1.3 使用x + ‘’</h3><p>结果同使用String()</p><h2 id="2-任意类型转换数字"><a href="#2-任意类型转换数字" class="headerlink" title="2 任意类型转换数字"></a>2 任意类型转换数字</h2><h3 id="2-1-使用Number"><a href="#2-1-使用Number" class="headerlink" title="2.1 使用Number()"></a>2.1 使用Number()</h3><pre><code>Number(true) // 1Number(null) // 0Number(undefined) // NaNNumber({}) // NaNNumber(&quot;1&quot;) // 1</code></pre><h3 id="2-2-使用parseInt"><a href="#2-2-使用parseInt" class="headerlink" title="2.2 使用parseInt"></a>2.2 使用parseInt</h3><p>用于将字符串转化为数字, 第一个参数为要转化的字符串，第二个参数为进制，例子中为十进制</p><pre><code>parseInt(&quot;1&quot;, 10) // 1parseInt(&quot;1a&quot;, 10) // 1parseInt(&quot;a1&quot;, 10) // NaN</code></pre><h3 id="2-3-使用parseFloat"><a href="#2-3-使用parseFloat" class="headerlink" title="2.3 使用parseFloat"></a>2.3 使用parseFloat</h3><p>用于将字符串转化为浮点数</p><h3 id="2-4-使用x-0"><a href="#2-4-使用x-0" class="headerlink" title="2.4 使用x - 0"></a>2.4 使用x - 0</h3><pre><code>&#39;18&#39; - 018true - 01false - 00</code></pre><h2 id="3-任意类型转布尔值"><a href="#3-任意类型转布尔值" class="headerlink" title="3 任意类型转布尔值"></a>3 任意类型转布尔值</h2><h3 id="3-1-使用Boolean"><a href="#3-1-使用Boolean" class="headerlink" title="3.1 使用Boolean()"></a>3.1 使用Boolean()</h3><pre><code>Boolean(1) // trueBoolean(NaN) // falseBoolean(0) // falseBoolean(&#39;&#39;) // falseBoolean(&#39;1&#39;) // trueBoolean(null) // falseBoolean(undefined) // false</code></pre><h3 id="3-2-使用-x"><a href="#3-2-使用-x" class="headerlink" title="3.2 使用!!x"></a>3.2 使用!!x</h3><pre><code>!!&#39;&#39; // false!!NaN // false</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS里的数据类型</title>
      <link href="/2019/08/05/js-li-de-shu-ju-lei-xing/"/>
      <url>/2019/08/05/js-li-de-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>JavaScript共有七种数据类型，分别是:</p><ul><li>数值(number)</li><li>字符串(string)</li><li>布尔值(boolean)</li><li>undefined</li><li>null</li><li>对象(object)<br>其中对象又称为合成类型，它经常由其他的基本类型组成</li></ul><h2 id="2-number类型"><a href="#2-number类型" class="headerlink" title="2. number类型"></a>2. number类型</h2><p>JavaScript内部 ，所有数字都以64位浮点数形式存储，不存在整数，所以有1 === 1.0 //true,<br>由于浮点数不是精确的值，所以涉及小数的比较和运算需要注意，如:</p><pre><code>0.1 + 0.2  // 0.30000000000000004</code></pre><h3 id="2-2-数值表示法"><a href="#2-2-数值表示法" class="headerlink" title="2.2 数值表示法"></a>2.2 数值表示法</h3><p>(1) 科学计数<br>数值可以采用科学记数法表示，如</p><pre><code>123e3 //123000123e-3 //0.123</code></pre><p>(2) 进制<br>0o表示八进制，0x表示16进制，0b表示2进制</p><pre><code>0xff // 2550o377 // 2550b11 //3</code></pre><h2 id="3-object"><a href="#3-object" class="headerlink" title="3. object"></a>3. object</h2><p>对象中的所有键名都是字符串，当键名是数值时，会被自动转为字符串.如果字符串符合标识符的定义，可以省略’’</p><pre><code>let obj = {    0:&#39;A&#39;,    1:&#39;B&#39;    }obj[0] // &#39;A&#39; </code></pre><p>当键名不符合标识符的条件时，需要加上引号 如</p><pre><code>let obj = {    &#39;1a&#39;:&#39;A&#39;,    &#39;a b&#39;:&#39;B&#39;    &#39;c+&#39;:&#39;C&#39;</code></pre><p>对象可以包含对象，设置可以包含本身</p><pre><code>let obj = {    name:&#39;zbdxsyf&#39;,    age: 18,        }</code></pre><p>对象读取属性有两种方法，一种是使用.运算符，还有一种是使用方括号</p><pre><code>let obj = {    p: &#39;Hello World&#39;    };obj.pobj[&#39;p&#39;]</code></pre><p>数字键名在方括号中加不加引号都可以，因为会自动转化为字符串,数字键名不能使用点运算符，因为有可能被当成小数<br>属性的遍历可以使用for…in循环，<br>使用for in 循环遍历对象</p><pre><code>let obj = {}for (let p in obj){    console.log(p,obj[p]) //不能使用obj.p, 因为obj.p会转化为obj[&#39;p&#39;],p是变量不是字符串    }</code></pre><p>得到obj对应的键值对<br>可以使用delete 命令来删除对象中的键值对，删除成功后返回true<br>使用delete需要注意:<br>delete删除一个不存在的属性不会报错，且返回true</p><pre><code>let obj = {}delete obj.p //true</code></pre><h2 id="5-undefined-null"><a href="#5-undefined-null" class="headerlink" title="5. undefined null"></a>5. undefined null</h2><p>null与undefined有以下区别:</p><ol><li>当变量声明未赋值时，变量的值为undefined</li><li>如果对象为空时，我们一般赋值为null 而不是undefined</li></ol><h2 id="4-typeof运算符"><a href="#4-typeof运算符" class="headerlink" title="4. typeof运算符"></a>4. typeof运算符</h2><p>使用typeof可以查看一个值的数据类型，但是存在如下问题:</p><ol><li>typeof(null) 的值为object</li><li>typeof(function)的值为function<br>事实上， null 为一种单独的数据类型，而function属于object类型</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换了主题</title>
      <link href="/2019/08/04/geng-huan-liao-zhu-ti/"/>
      <url>/2019/08/04/geng-huan-liao-zhu-ti/</url>
      
        <content type="html"><![CDATA[<p>选择了一个新的主题，发表文章测试一下</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2019/08/04/article-title/"/>
      <url>/2019/08/04/article-title/</url>
      
        <content type="html"><![CDATA[<p>Hello World!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/04/hello-world/"/>
      <url>/2019/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
